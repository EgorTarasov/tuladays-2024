// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: rag_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RAGService_AddDocuments_FullMethodName = "/rag.RAGService/AddDocuments"
	RAGService_StreamQuery_FullMethodName  = "/rag.RAGService/StreamQuery"
)

// RAGServiceClient is the client API for RAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RAGService defines the gRPC service for the Retrieval-Augmented Generation pipeline.
type RAGServiceClient interface {
	// Adds documents to the RAG pipeline.
	AddDocuments(ctx context.Context, in *AddDocumentsRequest, opts ...grpc.CallOption) (*AddDocumentsResponse, error)
	// Streams query results from the RAG pipeline.
	StreamQuery(ctx context.Context, in *StreamQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueryResponse], error)
}

type rAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAGServiceClient(cc grpc.ClientConnInterface) RAGServiceClient {
	return &rAGServiceClient{cc}
}

func (c *rAGServiceClient) AddDocuments(ctx context.Context, in *AddDocumentsRequest, opts ...grpc.CallOption) (*AddDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDocumentsResponse)
	err := c.cc.Invoke(ctx, RAGService_AddDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) StreamQuery(ctx context.Context, in *StreamQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RAGService_ServiceDesc.Streams[0], RAGService_StreamQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamQueryRequest, StreamQueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_StreamQueryClient = grpc.ServerStreamingClient[StreamQueryResponse]

// RAGServiceServer is the server API for RAGService service.
// All implementations must embed UnimplementedRAGServiceServer
// for forward compatibility.
//
// RAGService defines the gRPC service for the Retrieval-Augmented Generation pipeline.
type RAGServiceServer interface {
	// Adds documents to the RAG pipeline.
	AddDocuments(context.Context, *AddDocumentsRequest) (*AddDocumentsResponse, error)
	// Streams query results from the RAG pipeline.
	StreamQuery(*StreamQueryRequest, grpc.ServerStreamingServer[StreamQueryResponse]) error
	mustEmbedUnimplementedRAGServiceServer()
}

// UnimplementedRAGServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRAGServiceServer struct{}

func (UnimplementedRAGServiceServer) AddDocuments(context.Context, *AddDocumentsRequest) (*AddDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocuments not implemented")
}
func (UnimplementedRAGServiceServer) StreamQuery(*StreamQueryRequest, grpc.ServerStreamingServer[StreamQueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamQuery not implemented")
}
func (UnimplementedRAGServiceServer) mustEmbedUnimplementedRAGServiceServer() {}
func (UnimplementedRAGServiceServer) testEmbeddedByValue()                    {}

// UnsafeRAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RAGServiceServer will
// result in compilation errors.
type UnsafeRAGServiceServer interface {
	mustEmbedUnimplementedRAGServiceServer()
}

func RegisterRAGServiceServer(s grpc.ServiceRegistrar, srv RAGServiceServer) {
	// If the following call pancis, it indicates UnimplementedRAGServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RAGService_ServiceDesc, srv)
}

func _RAGService_AddDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).AddDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_AddDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).AddDocuments(ctx, req.(*AddDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_StreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RAGServiceServer).StreamQuery(m, &grpc.GenericServerStream[StreamQueryRequest, StreamQueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RAGService_StreamQueryServer = grpc.ServerStreamingServer[StreamQueryResponse]

// RAGService_ServiceDesc is the grpc.ServiceDesc for RAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag.RAGService",
	HandlerType: (*RAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDocuments",
			Handler:    _RAGService_AddDocuments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQuery",
			Handler:       _RAGService_StreamQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rag_service.proto",
}
