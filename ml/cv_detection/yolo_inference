import torch
from PIL import Image
from matplotlib import pyplot as plt
import os
import cv2


class ObjectDetector:
    def __init__(self, model_path, conf_threshold=0.25):
        """
        Инициализация детектора тонометров.
        :param model_path: Путь к обученной модели YOLOv5.
        :param conf_threshold: Порог уверенности для отображения предсказаний.
        """
        self.model_path = model_path
        self.conf_threshold = conf_threshold
        self.model = self.load_model()

    def load_model(self):
        """
        Загружает YOLOv5 модель.
        :return: Загруженная модель YOLOv5.
        """
        print(f"Загрузка модели из: {self.model_path}")
        model = torch.hub.load('ultralytics/yolov5', 'custom', path=self.model_path)
        model.conf = self.conf_threshold  # Установка порога уверенности
        return model

    def predict(self, image_path):
        """
        Выполняет предсказание для изображения.
        :param image_path: Путь к изображению.
        :return: Результаты предсказания (DataFrame).
        """
        print(f"Выполняется предсказание для изображения: {image_path}")
        results = self.model(image_path)
        results.print()
        return results

    def visualize(self, results, save_dir="results"):
        """
        Отображает и сохраняет результаты предсказания.
        :param results: Результаты предсказания.
        :param save_dir: Папка для сохранения визуализации.
        """
        results.show()
        results.save(save_dir=save_dir)  # Сохраняет результаты
        print(f"Результаты сохранены в папку: {save_dir}")

    def get_detections(self, results):
        """
        Получает предсказания в формате DataFrame.
        :param results: Результаты предсказания.
        :return: DataFrame с детекциями.
        """
        detections = results.pandas().xyxy[0]
        print("Детекции:")
        print(detections)
        return detections

    def crop_objects(self, image_path, results, output_dir="cropped_predictions"):
        """
        Вырезает объекты на основе предсказаний модели и сохраняет их.
        :param image_path: Путь к изображению.
        :param results: Результаты предсказания (DataFrame).
        :param output_dir: Папка для сохранения вырезанных объектов.
        """
        os.makedirs(output_dir, exist_ok=True)
        image = cv2.imread(image_path)
        if image is None:
            print(f"Не удалось загрузить изображение: {image_path}")
            return

        detections = self.get_detections(results)
        for i, row in detections.iterrows():
            # Извлекаем координаты bounding box
            x1, y1, x2, y2 = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])
            confidence = row['confidence']
            cls = int(row['class'])
            label = row['name']

            # Вырезаем объект
            cropped_object = image[y1:y2, x1:x2]

            # Сохраняем вырезанный объект
            cropped_image_name = f"{os.path.splitext(os.path.basename(image_path))[0]}_class{cls}_conf{confidence:.2f}_obj{i}.jpg"
            cropped_image_path = os.path.join(output_dir, cropped_image_name)
            cv2.imwrite(cropped_image_path, cropped_object)
            print(f"Сохранен объект: {cropped_image_path}")


if __name__ == "__main__":
    model_path = 'yolov5/runs/train/exp4/weights/best.pt'
    image_path = 'photo_2024-11-16_10-25-20.jpg'
    detector = ObjectDetector(model_path=model_path, conf_threshold=0.2)

    results = detector.predict(image_path)

    detector.visualize(results, save_dir="output_results")

    detections = detector.get_detections(results)

    detector.crop_objects(image_path, results, output_dir="cropped_predictions")
